// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/about" | "/account" | "/account/2fa" | "/account/settings" | "/admin" | "/admin/deletions" | "/ai" | "/ai-test" | "/analytics" | "/auth" | "/auth/dev-force" | "/auth/signin" | "/auth/signup" | "/auth/status" | "/business" | "/business/catalog" | "/business/new" | "/catalog/upload" | "/copilot" | "/create" | "/dashboard" | "/dashboard/access" | "/dashboard/appearance" | "/dashboard/barcode" | "/dashboard/buyer" | "/dashboard/catalog" | "/dashboard/create" | "/dashboard/locations" | "/dashboard/payments" | "/dashboard/profile" | "/dashboard/seller/Inventory" | "/dashboard/settings" | "/dashboard/systems" | "/dashboard/systems/ai" | "/dashboard/systems/oms" | "/dashboard/systems/scm" | "/dashboard/systems/tms" | "/dashboard/systems/wms" | "/enterprise" | "/enterprise/[system]" | "/enterprise/admin/navigation" | "/enterprise/ai/console" | "/enterprise/analytics/dashboard" | "/enterprise/analytics/library" | "/enterprise/analytics/targets" | "/enterprise/analytics/theme-settings" | "/enterprise/dashboard" | "/enterprise/integration/audit" | "/enterprise/integration/customers" | "/enterprise/integration/map-fields" | "/enterprise/integration/orders" | "/enterprise/inventory" | "/enterprise/market" | "/enterprise/market/history" | "/enterprise/market/upload" | "/enterprise/settings/policies" | "/export" | "/feed" | "/integrations" | "/inventory" | "/join" | "/legal/privacy" | "/legal/terms" | "/login" | "/logout" | "/market" | "/market/[postId]" | "/market/feed" | "/marketplace" | "/onboard" | "/onboard/profile" | "/onboarding" | "/pods" | "/posts/new" | "/pricing" | "/privacy" | "/profile" | "/register" | "/seller[id]" | "/settings/access" | "/settings/account" | "/settings/appearance" | "/signin" | "/signout" | "/signup" | "/systems" | "/systems/analytics" | "/systems/barcode" | "/systems/catalog" | "/systems/integrations" | "/systems/integrations/new" | "/systems/oms" | "/systems/orders" | "/systems/pos" | "/systems/systems" | "/systems/tms" | "/systems/wms" | "/systems/wms/voice-picking" | "/terms" | "/u/[username]"
type AppRouteHandlerRoutes = "/api/ai/agents" | "/api/ai/characters" | "/api/ai/chat" | "/api/ai/conversations" | "/api/ai/invoke" | "/api/ai/train" | "/api/analytics/targets/upload" | "/api/auth/login" | "/api/auth/logout" | "/api/auth/me" | "/api/auth/register" | "/api/catalog/post" | "/api/catalog/public" | "/api/comments" | "/api/enterprise/flags" | "/api/enterprise/market/history" | "/api/enterprise/market/publish" | "/api/enterprise/nav" | "/api/enterprise/prefs" | "/api/inventory/categories" | "/api/inventory/dashboard/low-stock" | "/api/inventory/dashboard/stock-summary" | "/api/inventory/items" | "/api/inventory/locations" | "/api/locations" | "/api/market/feed" | "/api/market/feed/stream" | "/api/market/posts/[id]" | "/api/marketplace/listings" | "/api/me" | "/api/orders" | "/api/orgs/[orgId]/settings" | "/api/products/[id]/aggregate-rating" | "/api/products/[id]/reviews" | "/api/track" | "/auth/me"
type PageRoutes = never
type LayoutRoutes = "/" | "/dashboard" | "/enterprise"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/about": {}
  "/account": {}
  "/account/2fa": {}
  "/account/settings": {}
  "/admin": {}
  "/admin/deletions": {}
  "/ai": {}
  "/ai-test": {}
  "/analytics": {}
  "/api/ai/agents": {}
  "/api/ai/characters": {}
  "/api/ai/chat": {}
  "/api/ai/conversations": {}
  "/api/ai/invoke": {}
  "/api/ai/train": {}
  "/api/analytics/targets/upload": {}
  "/api/auth/login": {}
  "/api/auth/logout": {}
  "/api/auth/me": {}
  "/api/auth/register": {}
  "/api/catalog/post": {}
  "/api/catalog/public": {}
  "/api/comments": {}
  "/api/enterprise/flags": {}
  "/api/enterprise/market/history": {}
  "/api/enterprise/market/publish": {}
  "/api/enterprise/nav": {}
  "/api/enterprise/prefs": {}
  "/api/inventory/categories": {}
  "/api/inventory/dashboard/low-stock": {}
  "/api/inventory/dashboard/stock-summary": {}
  "/api/inventory/items": {}
  "/api/inventory/locations": {}
  "/api/locations": {}
  "/api/market/feed": {}
  "/api/market/feed/stream": {}
  "/api/market/posts/[id]": { "id": string; }
  "/api/marketplace/listings": {}
  "/api/me": {}
  "/api/orders": {}
  "/api/orgs/[orgId]/settings": { "orgId": string; }
  "/api/products/[id]/aggregate-rating": { "id": string; }
  "/api/products/[id]/reviews": { "id": string; }
  "/api/track": {}
  "/auth": {}
  "/auth/dev-force": {}
  "/auth/me": {}
  "/auth/signin": {}
  "/auth/signup": {}
  "/auth/status": {}
  "/business": {}
  "/business/catalog": {}
  "/business/new": {}
  "/catalog/upload": {}
  "/copilot": {}
  "/create": {}
  "/dashboard": {}
  "/dashboard/access": {}
  "/dashboard/appearance": {}
  "/dashboard/barcode": {}
  "/dashboard/buyer": {}
  "/dashboard/catalog": {}
  "/dashboard/create": {}
  "/dashboard/locations": {}
  "/dashboard/payments": {}
  "/dashboard/profile": {}
  "/dashboard/seller/Inventory": {}
  "/dashboard/settings": {}
  "/dashboard/systems": {}
  "/dashboard/systems/ai": {}
  "/dashboard/systems/oms": {}
  "/dashboard/systems/scm": {}
  "/dashboard/systems/tms": {}
  "/dashboard/systems/wms": {}
  "/enterprise": {}
  "/enterprise/[system]": { "system": string; }
  "/enterprise/admin/navigation": {}
  "/enterprise/ai/console": {}
  "/enterprise/analytics/dashboard": {}
  "/enterprise/analytics/library": {}
  "/enterprise/analytics/targets": {}
  "/enterprise/analytics/theme-settings": {}
  "/enterprise/dashboard": {}
  "/enterprise/integration/audit": {}
  "/enterprise/integration/customers": {}
  "/enterprise/integration/map-fields": {}
  "/enterprise/integration/orders": {}
  "/enterprise/inventory": {}
  "/enterprise/market": {}
  "/enterprise/market/history": {}
  "/enterprise/market/upload": {}
  "/enterprise/settings/policies": {}
  "/export": {}
  "/feed": {}
  "/integrations": {}
  "/inventory": {}
  "/join": {}
  "/legal/privacy": {}
  "/legal/terms": {}
  "/login": {}
  "/logout": {}
  "/market": {}
  "/market/[postId]": { "postId": string; }
  "/market/feed": {}
  "/marketplace": {}
  "/onboard": {}
  "/onboard/profile": {}
  "/onboarding": {}
  "/pods": {}
  "/posts/new": {}
  "/pricing": {}
  "/privacy": {}
  "/profile": {}
  "/register": {}
  "/seller[id]": {}
  "/settings/access": {}
  "/settings/account": {}
  "/settings/appearance": {}
  "/signin": {}
  "/signout": {}
  "/signup": {}
  "/systems": {}
  "/systems/analytics": {}
  "/systems/barcode": {}
  "/systems/catalog": {}
  "/systems/integrations": {}
  "/systems/integrations/new": {}
  "/systems/oms": {}
  "/systems/orders": {}
  "/systems/pos": {}
  "/systems/systems": {}
  "/systems/tms": {}
  "/systems/wms": {}
  "/systems/wms/voice-picking": {}
  "/terms": {}
  "/u/[username]": { "username": string; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/dashboard": never
  "/enterprise": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
