version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    build:
      context: .
      dockerfile: tregu_backend/Dockerfile
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      GIT_SHA: ${GIT_SHA}
      BUILD_TIME: ${BUILD_TIME}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8003/docs"]
      interval: 10s
      timeout: 5s
      retries: 30

  frontend:
    build:
      context: .
      dockerfile: tregu_frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    env_file: .env.prod
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000',res=>{if(res.statusCode<400)process.exit(0);process.exit(1)})\""]
      interval: 10s
      timeout: 5s
      retries: 30

  caddy:
    build:
      context: .
      dockerfile: caddy/Dockerfile
    environment:
      - CADDY_ADMIN=0.0.0.0:2019
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: tregu_backend/Dockerfile
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "/app/scripts/migrate.py"]
    restart: "no"

volumes:
  pgdata:
